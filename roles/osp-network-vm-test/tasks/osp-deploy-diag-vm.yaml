---

- name: set defaults
  set_fact:
    HEADER: "============ Network validation results - BEGIN ================"
    FOOTER: "============ Network validation results - END ================"
    RESULT_LABEL: "NETWORK TEST RESULT:"

- name: set VM regex
  set_fact:
    VMNAME_REGEX: "{{ VMNAME | regex_replace('\\*', '\\*') }}"

- name: Display Deployment Configuration values
  debug:
    msg:
      - "Network id:        {{ network_id }}"
      - "Network name:      {{ network_name }}"
      - "Availability zone: {{ az }}"
      - ""
      - "RHEL image:        {{ os_image }}"
      - ""
      - "Diagnostic VM:     {{ VMNAME }}"

- name: Build Network diagnostic VM
  os_server:
    auth:
      auth_url: "{{ osp_url }}"
      username: "{{ osp_username }}"
      password: "{{ osp_password }}"
      user_domain_name: "{{ osp_userdomain }}"
      project_name: "{{ osp_project }}"
      project_domain_name: "{{ osp_projectdomain }}"
    name: "{{ VMNAME }}"
    cacert: "{{ cacert }}"
    image: "{{ os_image }}"
    flavor_ram: 4096
    network: "{{ network_id }}"
    availability_zone: "{{ az }}"
    auto_ip: no
 #  key: "id_rsa-netdebug.pub"
 #  key_name: "tom"
    state: present
    userdata: |
      #!/bin/bash
      echo "{{ HEADER }}"
      {{ lookup('template', 'netdiag-base.sh') }}
      {{ lookup('template', 'netdiag-dns.sh') }}
      {{ lookup('template', 'netdiag-k8sapi.sh') }}
      {{ lookup('template', 'netdiag-rhacm.sh') }}
      {{ lookup('template', 'netdiag-results.sh') }}
      echo "{{ FOOTER }}"
  ignore_errors: true
  register: result

#- name: Display results
#  debug:
#    msg:
#      - "{{ result }}"

- name: get VM id
  set_fact:
    vm_id: "{{ result.id }}"

- name: Wait for the diagnostic VM to deploy
  shell: "{{ OpenStack_CLI }} server list | grep '{{ VMNAME_REGEX }}'"
#  ignore_errors: true
  register: result
  until: "(result.rc == 0)"
  retries: 5
  delay: 2

